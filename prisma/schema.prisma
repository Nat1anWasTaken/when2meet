datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

generator zod {
    provider = "prisma-zod-generator"
    output   = "./generated/zod"
}

model User {
    id                String        @id @map("_id")
    name              String
    email             String
    emailVerified     Boolean
    image             String?
    createdAt         DateTime
    updatedAt         DateTime
    sessions          Session[]
    accounts          Account[]
    Event             Event[]
    UserTimeSelection Participant[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id @map("_id")
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id @map("_id")
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id @map("_id")
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

type TimeSelection {
    startTime DateTime
    endTime   DateTime
}

model Event {
    id                String        @id @map("_id")
    timezone          String // IANA timezone identifier
    organizerId       String?
    organizer         User?         @relation(fields: [organizerId], references: [id], onDelete: SetNull)
    availableTime     TimeSelection
    userTimeSelection Participant[]
    weeklyRecurrence  Boolean // Indicate that this event is a weekly recurrence and not a one-time event. For weekly events, we should only list the day of the week and not the date.

    @@map("event")
}

model Participant {
    id        String        @id @map("_id")
    eventId   String
    username  String
    userId    String? // Optional user ID for the user who made the selection, just use the username if not logged in
    createdAt DateTime
    updatedAt DateTime
    selection TimeSelection

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("time_selection")
}
